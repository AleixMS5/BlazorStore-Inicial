@using BlazorStore.Components.Carousel
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

<div id="carousel" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        @for (var i = 0; i < Items?.Length; i++)
        {
            <li data-target="#carousel" data-slide-to="@i" class="@(i==0? "active": string.Empty)"></li>
        }
    </ol>
    <div class="carousel-inner">
        @for (int i = 0; i < Items?.Length; i++)
        {
            var item = Items[i];
            <div class="carousel-item @(i==0? "active": string.Empty)">
                <img class="d-block w-100" src="@item.Image" alt="@item.Text">
                <div class="carousel-caption d-none d-md-block">
                    <h3>@item.Text</h3>
                    <p><a class="carousel-cta" href="@item.Link">Click to explore</a></p>
                </div>
            </div>
        }
    </div>
    <a class="carousel-control-prev" href="#carousel" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carousel" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

@code {
    [Parameter]
    public CarouselItem[] Items { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("window.initializeCarousel");
        }
    }
}
